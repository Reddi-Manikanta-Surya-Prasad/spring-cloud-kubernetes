@Library('jenkins-shared-library@main') _

pipeline {
    agent any

    parameters {
        choice(name: 'action', choices: 'create\nrollback', description: 'Create/rollback of the deployment')
        string(name: 'ImageName', description: "Name of the docker build", defaultValue: "kubernetes-configmap-reload")
        string(name: 'ImageTag', description: "Name of the docker build", defaultValue: "v1")
        string(name: 'AppName', description: "Name of the Application", defaultValue: "kubernetes-configmap-reload")
        string(name: 'docker_repo', description: "Name of docker repository", defaultValue: "reddisurya")
    }

    stages {
        stage('Git Checkout') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                checkout(
                    changelog: false,
                    poll: false,
                    scm: [$class: 'GitSCM', branches: [[name: 'main']], userRemoteConfigs: [[url: 'https://github.com/Reddi-Manikanta-Surya-Prasad/spring-cloud-kubernetes.git']]]
                )
            }
        }

        stage('Build Maven') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                dir("${params.AppName}") {
                    script {
                        def mvnHome = tool 'maven3'
                        sh "${mvnHome}/bin/mvn clean package"
                    }
                }
            }
        }

        stage("Docker Build and Push") {
            when {
                expression { params.action == 'create' }
            }
            steps {
                dir("${params.AppName}") {
                    script {
                        // Assuming you have a 'dockerBuild' step in your shared library
                        dockerBuild("${params.ImageName}", "${params.docker_repo}")
                    }
                }
            }
        }

        stage("Docker CleanUP") {
            when {
                expression { params.action == 'create' }
            }
            steps {
                dir("${params.AppName}") {
                    script {
                        // Assuming you have a 'dockerCleanup' step in your shared library
                        dockerCleanup("${params.ImageName}", "${params.docker_repo}")
                    }
                }
            }
        }

        stage("Ansible Setup") {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    sh 'ansible-playbook ${WORKSPACE}/kubernetes-configmap-reload/server_setup.yml'
                }
            }
        }

        stage("Create deployment") {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    sh "echo ${WORKSPACE}"
                    sh "kubectl create -f ${WORKSPACE}/kubernetes-configmap-reload/kubernetes-configmap.yml"
                }
            }
        }

        stage("wait_for_pods") {
            when {
                expression { params.action == 'create' }
            }
            steps {
                sh 'sleep 300'
            }
        }

        stage("rollback deployment") {
            when {
                expression { params.action == 'rollback' }
            }
            steps {
                script {
                    sh """
                        kubectl delete deploy ${params.AppName}
                        kubectl delete svc ${params.AppName}
                    """
                }
            }
        }
    }
}
